@page "/recipes"
@using BlazorCookbookApp.Services
@inject RecipeScanner RecipeScanner
@inject NavigationManager Navigation
@inject ILogger<Recipes> Logger
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer

<PageTitle>Browse Recipes - Blazor Cookbook</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1>Browse Recipes</h1>
            <p class="lead">
                Discover the Blazor Cookbook recipes and additional pages. Each page demonstrates 
                specific Blazor concepts and patterns.
            </p>

            @if (recipes == null)
            {
                <p><em>Loading recipes...</em></p>
            }
            else if (!recipes.Any())
            {
                <p><em>No recipes found.</em></p>
            }
            else
            {
                <!-- Featured Recipes Section (4+ stars) -->
                @if (GetFeaturedRecipes().Any())
                {
                    <div class="mb-5">
                        <h3 class="text-primary mb-3">⭐ Featured Recipes</h3>
                        <p class="text-muted mb-3">
                            These recipes showcase comprehensive examples and valuable patterns.
                        </p>
                        
                        <div class="table-responsive">
                            <table class="table table-hover border">
                                <thead class="table-primary">
                                    <tr>
                                        <th>Title</th>
                                        <th>Action</th>
                                        <th>Summary</th>
                                        <th>Location</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var recipe in GetFeaturedRecipes())
                                    {
                                        <tr>
                                            <td><strong>@recipe.Title</strong></td>
                                            <td>
                                                <button class="btn btn-sm btn-primary" @onclick="() => NavigateToRecipe(recipe.Route)">
                                                    Open
                                                </button>
                                            </td>
                                            <td>@recipe.Summary</td>
                                            <td>
                                                <span class="badge @(recipe.Location == "Client" ? "bg-primary" : "bg-secondary")">
                                                    @recipe.Location
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                
                <!-- Main Recipe Table -->
                <h3 class="mb-3">All Recipes</h3>
                <div class="recipe-overview">
                    <div class="table-responsive">
                        <table class="table table-striped">
                        <thead>
                            <tr>
                                <th class="d-none d-lg-table-cell">Chapter</th>
                                <th class="d-none d-lg-table-cell">Recipe</th>
                                <th>Title</th>
                                <th>Action</th>
                                <th class="d-none d-md-table-cell">Summary</th>
                                <th class="d-none d-md-table-cell">Location</th>
                                <th>Stars</th>
                                <th class="d-none d-lg-table-cell">Filename</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var recipe in recipes)
                            {
                                <tr>
                                    <td class="d-none d-lg-table-cell">@recipe.Chapter</td>
                                    <td class="d-none d-lg-table-cell">@recipe.Recipe</td>
                                    <td>@recipe.Title</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => NavigateToRecipe(recipe.Route)">
                                            Open
                                        </button>
                                    </td>
                                    <td class="d-none d-md-table-cell">@recipe.Summary</td>
                                    <td class="d-none d-md-table-cell">
                                        <span class="badge @(recipe.Location == "Client" ? "bg-primary" : "bg-secondary")">
                                            @recipe.Location
                                        </span>
                                    </td>
                                    <td>@GetStarDisplay(recipe.Stars)</td>
                                    <td class="d-none d-lg-table-cell">@recipe.FilePath</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<RecipeInfo>? recipes;

    /// <summary>
    /// Load all recipes on page initialization with minimal logging.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            recipes = await RecipeScanner.GetRecipesAsync();
            
            // Minimal logging - only recipe count and only in development
            if (Environment.IsDevelopment())
            {
                Console.WriteLine($"Found {recipes.Count} recipes");
            }
        }
        catch (Exception ex)
        {
            // Use proper ILogger for errors
            Logger.LogError(ex, "Error loading recipes");
            recipes = new List<RecipeInfo>();
        }
    }

    /// <summary>
    /// Navigate to recipe page with proper error logging.
    /// </summary>
    private void NavigateToRecipe(string route)
    {
        try
        {
            Navigation.NavigateTo(route);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Navigation error for route: {Route}", route);
        }
    }

    /// <summary>
    /// Formats star rating as visual stars (★★★★☆).
    /// </summary>
    /// <param name="stars">Star rating (1-5)</param>
    /// <returns>Visual star representation</returns>
    private string GetStarDisplay(int stars)
    {
        if (stars < 1 || stars > 5)
            return "unrated";
        
        var filledStars = new string('★', stars);
        var emptyStars = new string('☆', 5 - stars);
        return filledStars + emptyStars;
    }

    /// <summary>
    /// Gets featured recipes (4+ stars) for the featured section.
    /// </summary>
    /// <returns>List of featured recipes</returns>
    private List<RecipeInfo> GetFeaturedRecipes()
    {
        if (recipes == null)
            return new List<RecipeInfo>();
        
        return recipes.Where(r => r.Stars >= 4).ToList();
    }
} 