@page "/ch01r04s"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IRecipeUrlService RecipeUrlService
@using BlazorCookbookApp.Client.Services
@using BlazorCookbookApp.Client.Shared
@inherits RenderModeComponentBase

<PageTitle>@RecipeUrlService.GetTitleWithNumbers(PageTitle)</PageTitle>
<h1>@RecipeUrlService.GetTitleWithNumbers(PageTitle)</h1>

<h2>Detecting rendermode at runtime</h2>
@if (!GetDisplayInteractive())
{
    <p>üì° Establishing SignalR connection to server...</p>
    <p>‚öôÔ∏è Server processing component...</p>
}
else
{
    <p>Page is now interactive. Server-side processing with real-time updates.</p>
}

<div class="card mb-4">
    <div class="card-header bg-dark text-white">
        <h5 class="mb-0">üîç Server Render Mode Status</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                @if (ShouldShowJourney())
                {
                    <p><strong>Previous state:</strong></p>
                    <div class="mb-2">
                        @foreach(var state in GetPreviousRenderModeStates())
                        {
                            <span class="badge @GetRenderModeClass(state.Mode) me-1 mb-1">
                                @state.Mode
                                @if (!string.IsNullOrEmpty(state.Duration))
                                {
                                    <small class="ms-1">(@state.Duration)</small>
                                }
                            </span>
                            @if (state != GetPreviousRenderModeStates().Last())
                            {
                                <span class="text-muted me-1">‚Üí</span>
                            }
                        }
                    </div>
                }
                <p><strong>Current State:</strong> 
                   <span class="badge @GetRenderModeClass() fs-6">@GetDisplayRenderMode()</span>
                </p>
                <p><strong>Interactive:</strong> 
                   <span class="badge @(GetDisplayInteractive() ? "bg-success" : "bg-secondary")">
                       @GetDisplayInteractive()
                   </span>
                   @if (GetDisplayInteractive())
                   {
                       @if (_interactiveTime.HasValue)
                       {
                           <span class="badge bg-secondary text-white ms-2">
                               @GetTimingWithEducationalDelay(_interactiveTime, "Interactive after ")
                           </span>
                       }
                       else
                       {
                           <span class="badge bg-warning text-dark ms-2">
                               Timing not set
                           </span>
                       }
                   }
                </p>
                @if (ShouldShowJourney())
                {
                    <!-- Explain Static¬π footnote for educational clarity -->
                    <div class="mb-2">
                        <small class="text-muted">@GetPreRenderingFootnote()</small>
                    </div>
                }
            </div>
            <div class="col-md-6">
                <p><strong>Assigned Mode:</strong> 
                   <span class="badge bg-secondary text-white fs-6">@(AssignedRenderMode?.GetType().Name ?? "not assigned")</span>
                </p>
                <p><strong>Transition Time:</strong> 
                   <span class="badge bg-secondary text-white">@GetServerTransitionTime()</span>
                </p>
                <p><strong>Current Action:</strong> 
                   <span class="badge bg-success text-white">@GetCurrentAction()</span>
                </p>
            </div>
        </div>
        
        <!-- Explain component instance behavior across render modes -->
        <div class="mt-3 p-3 bg-light rounded">
            <h6 class="text-muted mb-2">üí° Component Lifecycle Insight</h6>
            <p class="small mb-1">
                <strong>Important:</strong> Each render mode transition creates a fresh component instance. 
                In-memory state (like action history) doesn't survive transitions without persistence mechanisms.
            </p>
            <p class="small mb-0 text-muted">
                This behavior is normal Blazor architecture - what you see as "one page" is actually multiple component instances across render phases.
            </p>
        </div>
        
        @if (HasActionHistory)
        {
            <div class="mt-3">
                <h6>Current Session Actions:</h6>
                @foreach(var category in GetActionsByCategory())
                {
                    <div class="mb-2">
                        <strong>@category.Key:</strong>
                        <ul class="list-unstyled ms-3">
                            @foreach(var action in category.Value)
                            {
                                <li>
                                    <span class="badge bg-light text-dark">@action.Time</span>
                                    <span class="badge bg-secondary text-white">@($"{action.DurationMs.ToString("F0")}ms")</span>
                                    @action.Description
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }
    </div>
</div>

<p>All components are processed on the server with SignalR communication.</p>

<h2>Offer page sends parameters and code to Ticket component</h2>
<p>- Before the tickets -</p>
<TicketServer Tariff="Adult" Price="10.00m" OnAdded="@Add" />
<TicketServer Tariff="Child" Price="5.00m" OnAdded="@Add" />
<p>- After the tickets -</p>

<h2>Features</h2>
<ul>
  <li>I detect the rendermode at runtime.</li>
  <li>Offer component page sends parameters and code for an event to Ticket component instances</li>
  <li>Offer uses rendermode InteractiveServer (processing on server, UI updates via SignalR)</li>
  <li>Server-side processing with real-time UI updates</li>
  <li>Action history tracking with categorized timeline</li>
</ul>

<h2>No errors</h2>

@code {
    // Page configuration - inherits from RenderModeComponentBase for lifecycle tracking
    protected override string PageTitle => "Server: Server-side Processing";
    protected override string PageSummary => "All processing happens on the server with real-time UI updates via SignalR";

    protected override void OnInitializedOverride()
    {
        RecipeUrlService.Initialize(Navigation);
        
        AddAction("Component initialization started", RenderActionCategory.Initialization);
        AddAction($"Initial render mode: {GetCurrentRenderMode()}", RenderActionCategory.Initialization);
        AddAction("RecipeUrlService initialized", RenderActionCategory.Initialization);
        AddAction($"Symbolic delay: {STATIC_PHASE_DELAY_MS}ms for timing consistency", RenderActionCategory.Initialization);
    }

    protected override Task OnAfterFirstRenderAsync()
    {
        AddAction("First render completed", RenderActionCategory.Initialization);
        
        if (GetCurrentInteractive())
        {
            // Track when server mode becomes interactive
            if (!_interactiveTime.HasValue)
            {
                _interactiveTime = DateTime.UtcNow;
                AddAction($"Interactive time set: {_interactiveTime.Value:HH:mm:ss.fff}", RenderActionCategory.Transition);
            }
            
            AddAction($"Server mode active: {GetCurrentRenderMode()}", RenderActionCategory.Transition);
            AddAction("SignalR connection established", RenderActionCategory.Transition);
            AddAction("Interactive features now available", RenderActionCategory.Active);
            AddAction("Server-side processing ready", RenderActionCategory.Active);
            
            // Update UI to show server mode status
            StateHasChanged();
        }
        
        return Task.CompletedTask;
    }

    protected override void OnRenderModeChanged(string? oldMode, string newMode)
    {
        // Track render mode transitions for server mode
        if (oldMode != null)
        {
            AddAction($"Render mode changed: {oldMode} ‚Üí {newMode}", RenderActionCategory.Transition);
        }
    }

    protected override Task OnEducationalDelayCompleted()
    {
        AddAction("Symbolic delay completed", RenderActionCategory.Transition);
        return Task.CompletedTask;
    }

    // Server-specific methods
    private string GetServerTransitionTime()
    {
        if (_interactiveTime.HasValue)
        {
            return GetTimingWithEducationalDelay(_interactiveTime, "Static‚ÜíServer: ");
        }
        else if (GetCurrentInteractive())
        {
            return "Measuring...";
        }
        return "In progress...";
    }

    private string GetCurrentAction()
    {
        return GetCurrentRenderMode()?.ToLower() switch
        {
            "server" => "Processing on server, updates via SignalR",
            "static" => "Rendering static HTML",
            _ => "Initializing..."
        };
    }
    
    private void Add()
    {
        AddAction("Ticket added to cart (server-side)", RenderActionCategory.Interaction);
        Console.WriteLine("Added to cart! (Server-side processing)");
    }
} 