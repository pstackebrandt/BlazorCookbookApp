@page "/ch01r04"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject IRecipeUrlService RecipeUrlService
@inherits RenderModeComponentBase
@using BlazorCookbookApp.Client.Shared

<PageTitle>@RecipeUrlService.GetTitleWithNumbers(PageTitle)</PageTitle>
<h1>@RecipeUrlService.GetTitleWithNumbers(PageTitle)</h1>
<p class="recipe-summary lead">@PageSummary</p>

<h2>Detecting rendermode at runtime</h2>
@if (!GetDisplayInteractive())
{
    <p>⬇️ Downloading WebAssembly runtime and components...</p>
    <p>🔄 Hydrating client-side components...</p>
}
else
{
    <p>Page is fully loaded locally. Now it is rendered at the client.</p>
    <p>⚡ <strong>Performance Advantage:</strong> Subsequent interactions have zero server latency!</p>
}

<div class="card mb-4">
    <div class="card-header bg-dark text-white">
        <h5 class="mb-0">🔍 Current Render Mode Status</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                @if (ShouldShowJourney())
                {
                    <p><strong>Previous state:</strong></p>
                    <div class="mb-2">
                        @foreach(var state in GetPreviousRenderModeStates())
                        {
                            <span class="badge @GetRenderModeClass(state.Mode) me-1 mb-1">
                                @state.Mode
                                @if (!string.IsNullOrEmpty(state.Duration))
                                {
                                    <small class="ms-1">(@state.Duration)</small>
                                }
                            </span>
                            @if (state != GetPreviousRenderModeStates().Last())
                            {
                                <span class="text-muted me-1">→</span>
                            }
                        }
                    </div>
                }
                <p><strong>Current State:</strong> 
                   <span class="badge @GetRenderModeClass() fs-6">@GetDisplayRenderMode()</span>
                </p>
                <p><strong>Interactive:</strong> 
                   <span class="badge @(GetDisplayInteractive() ? "bg-success" : "bg-secondary")">
                       @GetDisplayInteractive()
                   </span>
                   @if (GetDisplayInteractive() && _interactiveTime.HasValue)
                   {
                       <span class="badge bg-secondary text-white ms-2">
                           @GetTimingWithEducationalDelay(_interactiveTime, "Interactive after ")
                       </span>
                   }
                </p>
                @if (ShouldShowJourney())
                {
                    <!-- Explain Static¹ footnote for educational clarity -->
                    <div class="mb-2">
                        <small class="text-muted">@GetPreRenderingFootnote()</small>
                    </div>
                }
            </div>
            <div class="col-md-6">
                <p><strong>Assigned Mode:</strong> 
                   <span class="badge bg-secondary text-white fs-6">@(AssignedRenderMode?.GetType().Name ?? "not assigned")</span>
                </p>
                <p><strong>Hydration Time:</strong> 
                   <span class="badge bg-secondary text-white">@GetWebAssemblyHydrationTime()</span>
                </p>
                <p><strong>Current Action:</strong> 
                   <span class="badge bg-success text-white">@GetCurrentAction()</span>
                </p>
                <p><strong>Network Status:</strong> 
                   <span class="badge @GetNetworkStatusClass()">@GetNetworkStatus()</span>
                </p>
            </div>
        </div>
        
        <!-- Show WebAssembly benefits and link to demo page -->
        @if (GetDisplayInteractive())
        {
            <div class="mt-3 p-3 bg-success bg-opacity-10 border border-success rounded">
                <h6 class="text-success mb-2">⚡ WebAssembly Performance Benefits</h6>
                <p class="small mb-2">
                    <strong>✅ Zero Server Latency:</strong> All processing happens locally<br>
                    <strong>✅ Offline Capable:</strong> Works without internet after initial load<br>
                    <strong>✅ Instant Responses:</strong> No network round-trips for interactions
                </p>
                @if (_userInteractionCount > 0)
                {
                    <div class="mb-3">
                        <span class="badge bg-success">
                            🏃‍♂️ @_userInteractionCount cart interaction@(_userInteractionCount > 1 ? "s" : "") completed
                        </span>
                        <span class="badge bg-info ms-2">
                            Response time: &lt;1ms (local processing)
                        </span>
                    </div>
                }
                <div class="text-center">
                    <a href="/ch01r04wademo" class="btn btn-primary btn-lg">
                        🚀 Try WebAssembly Demo →
                    </a>
                    <p class="small text-muted mt-2 mb-0">
                        Experience hands-on WebAssembly capabilities and instant local processing
                    </p>
                </div>
            </div>
        }
        
        <!-- Explain component instance behavior across render modes -->
        <div class="mt-3 p-3 bg-light rounded">
            <h6 class="text-muted mb-2">💡 Component Lifecycle Insight</h6>
            <p class="small mb-1">
                <strong>Important:</strong> Each render mode transition creates a fresh component instance. 
                In-memory state (like action history) doesn't survive transitions without persistence mechanisms.
            </p>
            <p class="small mb-0 text-muted">
                This behavior is normal Blazor architecture - what you see as "one page" is actually multiple component instances across render phases.
            </p>
        </div>
        
        @if (HasActionHistory)
        {
            <div class="mt-3">
                <h6>Current Session Actions:</h6>
                @foreach(var category in GetActionsByCategory())
                {
                    <div class="mb-2">
                        <strong>@category.Key:</strong>
                        <ul class="list-unstyled ms-3">
                            @foreach(var action in category.Value)
                            {
                                <li>
                                    <span class="badge bg-light text-dark">@action.Time</span>
                                    <span class="badge bg-secondary text-white">@($"{action.DurationMs.ToString("F0")}ms")</span>
                                    @action.Description
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }
    </div>
</div>

<p>All components are placed in the Client project.</p>

<h2>Offer page sends parameters and code to Ticket component</h2>
<p>- Before the tickets -</p>
<Ticket Tariff="Adult" Price="10.00m" OnAdded="@Add" />
<Ticket Tariff="Child" Price="5.00m" OnAdded="@Add" />
<p>- After the tickets -</p>



<h2>Features</h2>
<ul>
  <li><strong>Render Mode Detection:</strong> Detects and displays current render mode at runtime</li>
  <li><strong>Component Communication:</strong> Offer page sends parameters and event handlers to Ticket components</li>
  <li><strong>WebAssembly Rendering:</strong> Uses InteractiveWebAssembly mode (renders in browser after download)</li>
  <li><strong>Client-side Processing:</strong> No server round-trips after initial WebAssembly load</li>
  <li><strong>Action History:</strong> Tracks component lifecycle events with categorized timeline</li>
  <li><strong>Performance Benefits:</strong> Zero server latency for user interactions after hydration</li>
  <li><strong>Educational Insights:</strong> Shows authentic component state and lifecycle behavior</li>
  <li><strong>Interactive Demo:</strong> Dedicated demo page for hands-on WebAssembly exploration</li>
</ul>

<h2>No errors</h2>

@code {
    // Track user interactions with cart functionality
    private int _userInteractionCount = 0;

    // Page configuration - inherits from RenderModeComponentBase for lifecycle tracking
    protected override string PageTitle => "WebAssembly: Client-side Processing";
    protected override string PageSummary => "All processing happens locally in your browser after initial WebAssembly download";
    protected override int PageStars => 5;

    protected override void OnInitializedOverride()
    {
        RecipeUrlService.Initialize(Navigation);
        
        AddAction("Component initialization started", RenderActionCategory.Initialization);
        AddAction($"Initial render mode: {GetCurrentRenderMode()}", RenderActionCategory.Initialization);
        AddAction("RecipeUrlService initialized", RenderActionCategory.Initialization);
        AddAction($"Educational delay: {STATIC_PHASE_DELAY_MS}ms to observe static phase", RenderActionCategory.Initialization);
        
        // Track WebAssembly-specific initialization
        if (GetCurrentRenderMode() == "WebAssembly")
        {
            AddAction("WebAssembly runtime loaded", RenderActionCategory.ClientHydration);
            AddAction("Starting client-side component hydration", RenderActionCategory.ClientHydration);
        }
    }

    protected override Task OnAfterFirstRenderAsync()
    {
        AddAction("First render completed", RenderActionCategory.Initialization);
        
        if (GetCurrentInteractive())
        {
            AddAction("WebAssembly hydration completed", RenderActionCategory.ClientHydration);
            AddAction("Client-side processing now active", RenderActionCategory.ClientActive);
            AddAction("All subsequent interactions will be local", RenderActionCategory.ClientActive);
            AddAction("Zero server latency achieved", RenderActionCategory.ClientActive);
            
            // Ensure interactive time is tracked
            if (!_interactiveTime.HasValue)
            {
                _interactiveTime = DateTime.UtcNow;
                AddAction($"Interactive time set: {_interactiveTime.Value:HH:mm:ss.fff}", RenderActionCategory.ClientActive);
            }
            
            // Force UI update to show timing
            StateHasChanged();
        }
        
        return Task.CompletedTask;
    }

    protected override void OnRenderModeChanged(string? oldMode, string newMode)
    {
        // Track render mode changes (rare for WebAssembly mode)
        if (oldMode != null)
        {
            AddAction($"Render mode changed: {oldMode} → {newMode}", RenderActionCategory.ClientHydration);
        }
    }

    protected override Task OnEducationalDelayCompleted()
    {
        AddAction("Educational delay completed", RenderActionCategory.Initialization);
        
        if (GetCurrentInteractive())
        {
            AddAction("WebAssembly mode now visible to user", RenderActionCategory.ClientActive);
        }
        
        return Task.CompletedTask;
    }

    private string GetWebAssemblyHydrationTime()
    {
        if (_interactiveTime.HasValue)
        {
            return GetTimingWithEducationalDelay(_interactiveTime, "Static→WebAssembly: ");
        }
        else if (GetCurrentInteractive())
        {
            return "Measuring...";
        }
        return "Still hydrating";
    }

    private string GetCurrentAction()
    {
        if (!GetCurrentInteractive())
        {
            return "Downloading and hydrating WebAssembly";
        }
        
        return GetCurrentRenderMode()?.ToLower() switch
        {
            "webassembly" => "Processing locally in browser",
            _ => "Client-side processing"
        };
    }

    private string GetNetworkStatus()
    {
        if (!GetCurrentInteractive())
        {
            return "Downloading";
        }
        
        return "Independent";
    }

    private string GetNetworkStatusClass()
    {
        if (!GetCurrentInteractive())
        {
            return "bg-warning text-dark";
        }
        
        return "bg-success text-white";
    }


    
    private void Add()
    {
        Console.WriteLine("Added to cart!");
        _userInteractionCount++;
        AddAction("User interaction: Added item to cart", RenderActionCategory.UserInteraction);
    }
}