@page "/ch01r04"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject IRecipeUrlService RecipeUrlService

<PageTitle>@RecipeUrlService.GetTitleWithNumbers(_title)</PageTitle>
<h1>@RecipeUrlService.GetTitleWithNumbers(_title)</h1>

<h2>Detecting rendermode at runtime</h2>
@if (!RendererInfo.IsInteractive || _isDelayed)
{
    <p>This page is not fully loaded locally. That's why it is rendered at the server.</p>
    @if (_isDelayed)
    {
        <p>🕐 <em>Educational delay: Showing static rendering phase for {STATIC_PHASE_DELAY_MS}ms...</em></p>
    }
}
else
{
    <p>Page is fully loaded locally. Now it is rendered at the client.</p>
}

<div class="card mb-4">
    <div class="card-header bg-dark text-white">
        <h5 class="mb-0">🔍 Current Render Mode Status</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <p><strong>Render Mode:</strong> 
                   <span class="badge @GetRenderModeClass() fs-6">@GetDisplayRenderMode()</span>
                </p>
                <p><strong>Interactive:</strong> 
                   <span class="badge @(GetDisplayInteractive() ? "bg-success" : "bg-secondary")">
                       @GetDisplayInteractive()
                   </span>
                   @if (GetDisplayInteractive() && _interactiveTime.HasValue)
                   {
                       <span class="badge bg-secondary text-white ms-2">
                           Interactive after @(((_interactiveTime.Value - _startTime).TotalMilliseconds - STATIC_PHASE_DELAY_MS).ToString("F0"))ms (+ @(STATIC_PHASE_DELAY_MS)ms educational delay)
                       </span>
                   }
                </p>
            </div>
            <div class="col-md-6">
                <p><strong>Assigned Mode:</strong> 
                   <span class="badge bg-secondary text-white fs-6">@(AssignedRenderMode?.GetType().Name ?? "not assigned")</span>
                </p>
                <p><strong>Static Phase Duration:</strong> 
                   <span class="badge bg-secondary text-white">@GetStaticPhaseDuration()</span>
                </p>
            </div>
        </div>
    </div>
</div>

<p>All components are placed in the Client project.</p>

<h2>Offer page sends parameters and code to Ticket component</h2>
<p>- Before the tickets -</p>
<Ticket Tariff="Adult" Price="10.00m" OnAdded="@Add" />
<Ticket Tariff="Child" Price="5.00m" OnAdded="@Add" />
<p>- After the tickets -</p>

<h2>Features</h2>
<ul>
  <li>I detect the rendermode at runtime.</li>
  <li>Offer component page sends parameters and code for an event to Ticket component instances</li>
  <li>Offer uses rendermode InteractiveWebAssembly
     (rendering in the browser after full load, but before this at the server?)</li>
</ul>

<h2>No errors</h2>

@code {
    private string _title = "Render mode InteractiveWebAssembly";
    private bool _isDelayed = true; // Start with delay to show static phase
    private DateTime _startTime = DateTime.UtcNow;
    private DateTime? _interactiveTime = null;
    private const int STATIC_PHASE_DELAY_MS = 1500; // 1.5 seconds to observe static rendering

    protected override void OnInitialized()
    {
        RecipeUrlService.Initialize(Navigation);
        _startTime = DateTime.UtcNow;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add educational delay to make static phase visible
            if (_isDelayed)
            {
                await Task.Delay(STATIC_PHASE_DELAY_MS);
                _isDelayed = false;
                StateHasChanged();
            }
            
            if (RendererInfo.IsInteractive)
            {
                _interactiveTime = DateTime.UtcNow;
                StateHasChanged();
            }
        }
    }

    private string GetDisplayRenderMode()
    {
        // During educational delay, show "Static" to simulate actual static phase
        return _isDelayed ? "Static" : (RendererInfo.Name ?? "Unknown");
    }

    private bool GetDisplayInteractive()
    {
        // During educational delay, show false to simulate actual static phase
        return !_isDelayed && RendererInfo.IsInteractive;
    }

    private string GetRenderModeClass()
    {
        var mode = GetDisplayRenderMode();
        return mode?.ToLower() switch
        {
            "webassembly" => "bg-success text-white", // Green for WebAssembly
            "static" => "bg-warning text-dark",       // Yellow for Static
            _ => "bg-secondary text-white"            // Gray for unknown
        };
    }

    private string GetStaticPhaseDuration()
    {
        if (_interactiveTime.HasValue)
        {
            var totalMs = (_interactiveTime.Value - _startTime).TotalMilliseconds;
            var actualMs = Math.Max(0, totalMs - STATIC_PHASE_DELAY_MS); // Subtract educational delay
            return $"{actualMs.ToString("F0")}ms (+ {STATIC_PHASE_DELAY_MS}ms educational delay)";
        }
        else if (RendererInfo.IsInteractive)
        {
            return "Measuring...";
        }
        return "Still in static phase";
    }
    
    private void Add()
    {
      Console.WriteLine("Added to cart!");
    }
}