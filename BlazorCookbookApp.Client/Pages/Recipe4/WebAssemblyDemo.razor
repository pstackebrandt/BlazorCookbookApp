@page "/ch01r04wademo"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject IRecipeUrlService RecipeUrlService

<PageTitle>@RecipeUrlService.GetTitleWithNumbers(PageTitle)</PageTitle>
<h1>@RecipeUrlService.GetTitleWithNumbers(PageTitle)</h1>
<p class="recipe-summary lead">@PageSummary</p>

<!-- Link back to main render mode page -->
<div class="mb-4">
    <a href="/ch01r04" class="btn btn-outline-secondary">
        ‚Üê Back to Render Mode Page
    </a>
</div>

<h2>WebAssembly Capabilities Demonstration</h2>

@if (!_isInteractive)
{
    <div class="alert alert-info">
        <h5>‚¨áÔ∏è Loading WebAssembly Demo...</h5>
        <p>Downloading WebAssembly runtime and initializing interactive features...</p>
    </div>
}
else
{
    <div class="alert alert-success">
        <h5>‚ö° WebAssembly Demo Ready!</h5>
        <p>All processing happens locally in your browser with zero server latency.</p>
    </div>
    
    <!-- WebAssembly capability demonstrations -->
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">üî¢ Instant Counter</h5>
                </div>
                <div class="card-body">
                    <p>Current Count: <span class="badge bg-primary fs-4">@_localCounter</span></p>
                    <button class="btn btn-primary me-2" @onclick="IncrementCounter">
                        Increment (+1)
                    </button>
                    <button class="btn btn-outline-primary me-2" @onclick="DecrementCounter">
                        Decrement (-1)
                    </button>
                    <button class="btn btn-secondary" @onclick="ResetCounter">
                        Reset
                    </button>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">‚è∞ Local Time Display</h5>
                </div>
                <div class="card-body">
                    <p>Browser Time: <span class="badge bg-info fs-6">@_currentTime</span></p>
                    <button class="btn btn-info me-2" @onclick="UpdateTime">
                        Update Time
                    </button>
                    <button class="btn btn-outline-info" @onclick="StartAutoUpdate">
                        @(_autoUpdateActive ? "Stop" : "Start") Auto-Update
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Real-time performance tracking -->
    <div class="mt-4 p-3 bg-success bg-opacity-10 border border-success rounded">
        <h4 class="text-success mb-3">üìä Performance Metrics</h4>
        <div class="row">
            <div class="col-md-4">
                <div class="text-center">
                    <div class="h2 text-success">@_totalInteractions</div>
                    <div class="text-muted">Total Interactions</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="text-center">
                    <div class="h2 text-success">&lt;1ms</div>
                    <div class="text-muted">Average Response Time</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="text-center">
                    <div class="h2 text-success">0</div>
                    <div class="text-muted">Server Round-trips</div>
                </div>
            </div>
        </div>
        <div class="mt-3">
            <p class="mb-1"><strong>‚úÖ Zero Server Latency:</strong> All processing happens locally in your browser</p>
            <p class="mb-1"><strong>‚úÖ Offline Capable:</strong> Works without internet connection after initial load</p>
            <p class="mb-1"><strong>‚úÖ Instant Responses:</strong> No network delays for user interactions</p>
            <p class="mb-0"><strong>‚úÖ Client Resources:</strong> Uses your device's CPU and memory efficiently</p>
        </div>
    </div>
    
    <!-- Track all demo interactions -->
    @if (_demoActions.Count > 0)
    {
        <div class="mt-4">
            <h4>üìù Demo Action History</h4>
            <div class="card">
                <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                    @foreach(var action in _demoActions.TakeLast(20).Reverse())
                    {
                        <div class="d-flex justify-content-between align-items-center border-bottom py-2">
                            <span>@action.Description</span>
                            <div>
                                <span class="badge bg-light text-dark">@action.Time</span>
                                <span class="badge bg-success">&lt;1ms</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="mt-2">
                <button class="btn btn-outline-secondary btn-sm" @onclick="ClearHistory">
                    Clear History
                </button>
                <small class="text-muted ms-3">Showing last 20 actions</small>
            </div>
        </div>
    }
}

<h2>About This Demo</h2>
<div class="mt-4">
    <p>This page demonstrates the key capabilities of WebAssembly in Blazor:</p>
    <ul>
        <li><strong>Local Processing:</strong> All interactions happen in your browser without server communication</li>
        <li><strong>Instant Responses:</strong> Zero network latency for user interface updates</li>
        <li><strong>Offline Capability:</strong> Works even when disconnected from the internet</li>
        <li><strong>Client-side State:</strong> Component state is maintained locally in browser memory</li>
        <li><strong>Performance Benefits:</strong> CPU-intensive operations run on your device</li>
    </ul>
    
    <div class="alert alert-info mt-3">
        <h6>üí° Educational Note</h6>
        <p class="mb-0">
            Try opening your browser's Network tab (F12 ‚Üí Network) and interact with the demo. 
            You'll see no network requests are made for the interactions - everything happens locally!
        </p>
    </div>
</div>

@code {
    // Page configuration for WebAssembly demo
    private string PageTitle => "Interactive WebAssembly Features Demo";
    private string PageSummary => "Hands-on demonstration of WebAssembly capabilities and local processing";
    
    // Demo interaction state
    private bool _isInteractive = false;
    private int _localCounter = 0;
    private int _totalInteractions = 0;
    private string _currentTime = DateTime.Now.ToString("HH:mm:ss.fff");
    private bool _autoUpdateActive = false;
    private Timer? _timer;
    
    // Simple action tracking for demo
    private List<DemoAction> _demoActions = new();
    
    protected override void OnInitialized()
    {
        RecipeUrlService.Initialize(Navigation);
        AddDemoAction("WebAssembly demo page initialized");
        AddDemoAction("Checking interactive status...");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Brief delay to show loading state
            await Task.Delay(100);
            _isInteractive = true;
            AddDemoAction("WebAssembly runtime loaded and ready");
            AddDemoAction("Demo features activated");
            StateHasChanged();
        }
    }
    
    private void IncrementCounter()
    {
        _localCounter++;
        _totalInteractions++;
        AddDemoAction($"Counter incremented to {_localCounter}");
    }
    
    private void DecrementCounter()
    {
        _localCounter--;
        _totalInteractions++;
        AddDemoAction($"Counter decremented to {_localCounter}");
    }
    
    private void ResetCounter()
    {
        _localCounter = 0;
        _totalInteractions++;
        AddDemoAction("Counter reset to 0");
    }
    
    private void UpdateTime()
    {
        _currentTime = DateTime.Now.ToString("HH:mm:ss.fff");
        _totalInteractions++;
        AddDemoAction($"Time updated to {_currentTime}");
    }
    
    private void StartAutoUpdate()
    {
        if (_autoUpdateActive)
        {
            _timer?.Dispose();
            _timer = null;
            _autoUpdateActive = false;
            AddDemoAction("Auto-update stopped");
        }
        else
        {
            _autoUpdateActive = true;
            _timer = new Timer(async _ =>
            {
                _currentTime = DateTime.Now.ToString("HH:mm:ss.fff");
                await InvokeAsync(StateHasChanged);
            }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
            AddDemoAction("Auto-update started (1-second interval)");
        }
        
        _totalInteractions++;
    }
    
    private void ClearHistory()
    {
        _demoActions.Clear();
        AddDemoAction("Action history cleared");
        _totalInteractions++;
    }
    
    private void AddDemoAction(string description)
    {
        _demoActions.Add(new DemoAction
        {
            Time = DateTime.Now.ToString("HH:mm:ss.fff"),
            Description = description
        });
    }
    
    public void Dispose()
    {
        _timer?.Dispose();
    }
    
    private class DemoAction
    {
        public string Time { get; set; } = "";
        public string Description { get; set; } = "";
    }
} 