@page "/ch01r04a"
@rendermode InteractiveAuto
@inject NavigationManager Navigation
@inject IRecipeUrlService RecipeUrlService
@inherits RenderModeComponentBase
@using BlazorCookbookApp.Client.Shared

<PageTitle>@RecipeUrlService.GetTitleWithNumbers(PageTitle)</PageTitle>
<h1>@RecipeUrlService.GetTitleWithNumbers(PageTitle)</h1>
<p class="recipe-summary lead">@PageSummary</p>

<h2>Detecting rendermode at runtime</h2>
@if (!GetDisplayInteractive() || _isDelayed)
{
    <p>üöÄ Starting with server-side rendering for fast initial load...</p>
    @if (_isDelayed)
    {
        <p>üïê <em>Educational delay: Showing static rendering phase for {STATIC_PHASE_DELAY_MS}ms...</em></p>
    }
    else if (GetCurrentRenderMode() == "Server")
    {
        <p>üì° Currently processing on server with SignalR communication.</p>
    }
    else if (_isInServerPhase)
    {
        <p>‚¨áÔ∏è Downloading WebAssembly runtime in background...</p>
    }
}
else
{
    <p>‚ú® Now running client-side! Transitioned from server to WebAssembly processing.</p>
    <p>üèÉ‚Äç‚ôÇÔ∏è Subsequent interactions will be fast with no server round-trips.</p>
}

<div class="card mb-4">
    <div class="card-header bg-dark text-white">
        <h5 class="mb-0">üîÑ Adaptive Render Mode Status</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                @if (ShouldShowJourney())
                {
                    <p><strong>Previous state:</strong></p>
                    <div class="mb-2">
                        @foreach(var state in GetPreviousRenderModeStates())
                        {
                            <span class="badge @GetRenderModeClass(state.Mode) me-1 mb-1">
                                @state.Mode
                                @if (!string.IsNullOrEmpty(state.Duration))
                                {
                                    <small class="ms-1">(@state.Duration)</small>
                                }
                            </span>
                            @if (state != GetPreviousRenderModeStates().Last())
                            {
                                <span class="text-muted me-1">‚Üí</span>
                            }
                        }
                    </div>
                }
                <p><strong>Current State:</strong> 
                   <span class="badge @GetRenderModeClass() fs-6">@GetDisplayRenderMode()</span>
                </p>
                <p><strong>Interactive:</strong> 
                   <span class="badge @(GetDisplayInteractive() ? "bg-success" : "bg-secondary")">
                       @GetDisplayInteractive()
                   </span>
                   @if (GetDisplayInteractive() && _interactiveTime.HasValue)
                   {
                       <span class="badge bg-secondary text-white ms-2">
                           @GetTimingWithEducationalDelay(_interactiveTime, "Interactive after ")
                       </span>
                   }
                </p>
                @if (ShouldShowJourney())
                {
                    <!-- Explain Static¬π footnote for educational clarity -->
                    <div class="mb-2">
                        <small class="text-muted">@GetPreRenderingFootnote()</small>
                    </div>
                }
            </div>
            <div class="col-md-6">
                <p><strong>Assigned Mode:</strong> 
                   <span class="badge bg-secondary text-white fs-6">@(AssignedRenderMode?.GetType().Name ?? "not assigned")</span>
                </p>
                <p><strong>Phase Transition:</strong> 
                   <span class="badge bg-secondary text-white">@GetPhaseTransitionTime()</span>
                </p>
                <p><strong>Current Phase:</strong> 
                   <span class="badge bg-success text-white">@GetCurrentPhase()</span>
                </p>
            </div>
        </div>
        
        <!-- Explain component instance behavior across render modes -->
        <div class="mt-3 p-3 bg-light rounded">
            <h6 class="text-muted mb-2">üí° Component Lifecycle Insight</h6>
            <p class="small mb-1">
                <strong>Important:</strong> Each render mode transition creates a fresh component instance. 
                In-memory state (like action history) doesn't survive transitions without persistence mechanisms.
            </p>
            <p class="small mb-0 text-muted">
                This behavior is normal Blazor architecture - what you see as "one page" is actually multiple component instances across render phases.
            </p>
        </div>
        
        @if (HasActionHistory)
        {
            <div class="mt-3">
                <h6>Current Session Actions:</h6>
                @foreach(var category in GetActionsByCategory())
                {
                    <div class="mb-2">
                        <strong>@category.Key:</strong>
                        <ul class="list-unstyled ms-3">
                            @foreach(var action in category.Value)
                            {
                                <li>
                                    <span class="badge bg-light text-dark">@action.Time</span>
                                    <span class="badge bg-secondary text-white">@($"{action.DurationMs.ToString("F0")}ms")</span>
                                    @action.Description
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }
    </div>
</div>

<p>Components start on server, then seamlessly transition to client-side processing.</p>

<h2>Offer page sends parameters and code to Ticket component</h2>
<p>- Before the tickets -</p>
<Ticket Tariff="Adult" Price="10.00m" OnAdded="@Add" />
<Ticket Tariff="Child" Price="5.00m" OnAdded="@Add" />
<p>- After the tickets -</p>

<h2>Features</h2>
<ul>
  <li>I detect the rendermode at runtime and track the adaptive journey.</li>
  <li>Offer component page sends parameters and code for an event to Ticket component instances</li>
  <li>Offer uses rendermode InteractiveAuto (server-first, then client-side after WASM loads)</li>
  <li>Best of both worlds: Fast initial load + subsequent client-side performance</li>
  <li>Adaptive render journey tracking with phase categorization</li>
  <li>Seamless user experience during server-to-client transition</li>
</ul>

<h2>No errors</h2>

@code {
    // Track Auto mode's adaptive server-to-client transition
    private bool _isInServerPhase = true;
    private DateTime? _clientTransitionTime = null;

    // Page configuration - inherits from RenderModeComponentBase for lifecycle tracking
    protected override string PageTitle => "Auto: Adaptive Server-to-Client";
    protected override string PageSummary => "Starts with fast server rendering, then seamlessly transitions to client-side processing";
    protected override int PageStars => 5;

    protected override void OnInitializedOverride()
    {
        RecipeUrlService.Initialize(Navigation);
        
        AddAction("Component initialization started", RenderActionCategory.Initialization);
        AddAction($"Initial render mode: {GetCurrentRenderMode()}", RenderActionCategory.Initialization);
        AddAction("RecipeUrlService initialized", RenderActionCategory.Initialization);
        AddAction($"Educational delay: {STATIC_PHASE_DELAY_MS}ms to observe static phase", RenderActionCategory.Initialization);
        
        // Track Auto mode's initial server phase
        if (GetCurrentRenderMode() == "Server" || !GetCurrentInteractive())
        {
            AddAction("Starting in server phase for fast initial load", RenderActionCategory.ServerPhase);
        }
    }

    protected override Task OnAfterFirstRenderAsync()
    {
        AddAction("First render completed", RenderActionCategory.Initialization);
        
        if (GetCurrentInteractive())
        {
            if (GetCurrentRenderMode() == "Server")
            {
                AddAction("Interactive server processing active", RenderActionCategory.ServerPhase);
                AddAction("SignalR connection established", RenderActionCategory.ServerPhase);
                AddAction("WebAssembly download initiated in background", RenderActionCategory.ClientTransition);
            }
            else if (GetCurrentRenderMode() == "WebAssembly")
            {
                // Handle direct WebAssembly start (cached subsequent visits)
                _clientTransitionTime = DateTime.UtcNow;
                _isInServerPhase = false;
                AddAction("Transitioned directly to WebAssembly mode", RenderActionCategory.ClientTransition);
                AddAction("Client-side processing now active", RenderActionCategory.ClientActive);
            }
        }
        
        return Task.CompletedTask;
    }

    protected override Task OnAfterSubsequentRenderAsync()
    {
        // Check for server-to-client transition
        if (_isInServerPhase && GetCurrentRenderMode() == "WebAssembly")
        {
            _clientTransitionTime = DateTime.UtcNow;
            _isInServerPhase = false;
            AddAction("üéâ Successfully transitioned from Server to WebAssembly!", RenderActionCategory.ClientTransition);
            AddAction("Client-side processing now active", RenderActionCategory.ClientActive);
            AddAction("Future interactions will be handled locally", RenderActionCategory.ClientActive);
            StateHasChanged();
        }
        
        return Task.CompletedTask;
    }

    protected override void OnRenderModeChanged(string? oldMode, string newMode)
    {
        // Log render mode transitions
        if (oldMode != null)
        {
            AddAction($"Render mode changed: {oldMode} ‚Üí {newMode}", RenderActionCategory.Transition);
        }
    }

    protected override Task OnEducationalDelayCompleted()
    {
        AddAction("Static phase delay completed", RenderActionCategory.Transition);
        return Task.CompletedTask;
    }

    // Auto-specific methods that aren't in base class
    private string GetPhaseTransitionTime()
    {
        if (_clientTransitionTime.HasValue)
        {
            return GetTimingWithEducationalDelay(_clientTransitionTime, "Server‚ÜíClient: ");
        }
        else if (_interactiveTime.HasValue && GetCurrentRenderMode() == "Server")
        {
            return GetTimingWithEducationalDelay(_interactiveTime, "Server active: ");
        }
        else if (GetCurrentInteractive())
        {
            return "Measuring transition...";
        }
        return "Initializing...";
    }

    private string GetCurrentPhase()
    {
        return GetCurrentRenderMode()?.ToLower() switch
        {
            "webassembly" => "Client-side processing (optimal performance)",
            "server" => "Server-side processing (preparing for client transition)",
            "static" => "Static HTML rendering",
            _ => "Initializing adaptive mode..."
        };
    }
    
    private void Add()
    {
        var processingLocation = GetCurrentRenderMode() == "WebAssembly" ? "client-side" : "server-side";
        AddAction($"Ticket added to cart ({processingLocation})", RenderActionCategory.Interaction);
        Console.WriteLine($"Added to cart! ({processingLocation} processing)");
    }
} 